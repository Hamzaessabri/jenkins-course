node {
            stage('Packaging') {
               build job: 'Create Package', parameters: [[$class: 'StringParameterValue', name: 'processName', value: processName], [$class: 'StringParameterValue', name: 'notes', value: notes], [$class: 'StringParameterValue', name: 'packageVersion', value: packageVersion]]
            }
            stage('Deploy to Dev') {
                build job: 'Deploy Package', parameters: [[$class: 'StringParameterValue', name: 'processName', value: processName], [$class: 'StringParameterValue', name: 'env', value: Dev_env], [$class: 'StringParameterValue', name: 'notes', value: notes], [$class: 'StringParameterValue', name: 'packageVersion', value: packageVersion]]            
            }
            stage('Execute Dev Process') {
                build job: 'Execute Process', parameters: [[$class: 'StringParameterValue', name: 'processName', value: ProcessName], [$class: 'StringParameterValue', name: 'atomName', value: atomName], [$class: 'StringParameterValue', name: 'atomType', value: atomType]]              
            }
            stage('sonar-scanner'){
            def scannerHome = tool name: 'Boomi Sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
            withCredentials([string(credentialsId: 'sonarToken', variable: 'sonarToken')]) {
              sh "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=BoomiSonar  -Dsonar.sources=${WORKSPACE} -Dsonar.login=${sonarToken}"
                        }
            }
            try {
                stage('Deploy to Prod') {
                            build job: 'Deploy Package', parameters: [[$class: 'StringParameterValue', name: 'processName', value: processName], [$class: 'StringParameterValue', name: 'env', value: PromotionEnv], [$class: 'StringParameterValue', name: 'notes', value: notes], [$class: 'StringParameterValue', name: 'packageVersion', value: packageVersion]]            
                        }
              } catch(e) {
                // mark build as failed
                currentBuild.result = "FAILURE";

                // send slack notification
                slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

                // throw the error
                throw e;
              }
}
